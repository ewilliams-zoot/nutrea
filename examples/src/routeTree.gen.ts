/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VirtualizedRouteImport } from './routes/virtualized'
import { Route as Key_navigationRouteImport } from './routes/key_navigation'
import { Route as Edit_nameRouteImport } from './routes/edit_name'
import { Route as BasicRouteImport } from './routes/basic'
import { Route as IndexRouteImport } from './routes/index'

const VirtualizedRoute = VirtualizedRouteImport.update({
  id: '/virtualized',
  path: '/virtualized',
  getParentRoute: () => rootRouteImport,
} as any)
const Key_navigationRoute = Key_navigationRouteImport.update({
  id: '/key_navigation',
  path: '/key_navigation',
  getParentRoute: () => rootRouteImport,
} as any)
const Edit_nameRoute = Edit_nameRouteImport.update({
  id: '/edit_name',
  path: '/edit_name',
  getParentRoute: () => rootRouteImport,
} as any)
const BasicRoute = BasicRouteImport.update({
  id: '/basic',
  path: '/basic',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/basic': typeof BasicRoute
  '/edit_name': typeof Edit_nameRoute
  '/key_navigation': typeof Key_navigationRoute
  '/virtualized': typeof VirtualizedRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/basic': typeof BasicRoute
  '/edit_name': typeof Edit_nameRoute
  '/key_navigation': typeof Key_navigationRoute
  '/virtualized': typeof VirtualizedRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/basic': typeof BasicRoute
  '/edit_name': typeof Edit_nameRoute
  '/key_navigation': typeof Key_navigationRoute
  '/virtualized': typeof VirtualizedRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/basic' | '/edit_name' | '/key_navigation' | '/virtualized'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/basic' | '/edit_name' | '/key_navigation' | '/virtualized'
  id:
    | '__root__'
    | '/'
    | '/basic'
    | '/edit_name'
    | '/key_navigation'
    | '/virtualized'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BasicRoute: typeof BasicRoute
  Edit_nameRoute: typeof Edit_nameRoute
  Key_navigationRoute: typeof Key_navigationRoute
  VirtualizedRoute: typeof VirtualizedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/virtualized': {
      id: '/virtualized'
      path: '/virtualized'
      fullPath: '/virtualized'
      preLoaderRoute: typeof VirtualizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/key_navigation': {
      id: '/key_navigation'
      path: '/key_navigation'
      fullPath: '/key_navigation'
      preLoaderRoute: typeof Key_navigationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit_name': {
      id: '/edit_name'
      path: '/edit_name'
      fullPath: '/edit_name'
      preLoaderRoute: typeof Edit_nameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/basic': {
      id: '/basic'
      path: '/basic'
      fullPath: '/basic'
      preLoaderRoute: typeof BasicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BasicRoute: BasicRoute,
  Edit_nameRoute: Edit_nameRoute,
  Key_navigationRoute: Key_navigationRoute,
  VirtualizedRoute: VirtualizedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
